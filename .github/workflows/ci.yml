name: Run CI build

on:
  push:
    branches:
      - main
    tags:
      - '*'
  pull_request:
  workflow_dispatch:

env:
  IMAGE_NAME: maykinmedia/shertogenbosch-design-tokens
  DOCKER_BUILDKIT: '1'

jobs:

  setup:
    name: Set up the build variables
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.vars.outputs.tag }}
      git_hash: ${{ steps.vars.outputs.git_hash }}

    steps:
      - name: Extract version information
        id: vars
        run: |
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name (if present at all)
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "main" ] && VERSION=latest

          # PRs result in version 'merge' -> transform that into 'latest'
          [ "$VERSION" == "merge" ] && VERSION=latest

          echo "tag=${VERSION}" >> $GITHUB_OUTPUT

  prettier:
    name: Check frontend code formatting with prettier
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Install dependencies
        run: npm ci

      - name: Run prettier linter
        run: npm run checkformat

  package-build:
    name: Build (and publish) the NPM package dist
    runs-on: ubuntu-latest

    environment:
      name: release
      url: https://www.npmjs.com/package/@maykinmedia/shertogenbosch-design-tokens
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'
          registry-url: 'https://registry.npmjs.org'

      - name: Build artifacts
        run: |
          npm ci
          npm run build

      - name: Check for nesting level errors
        run: ./bin/check_token_nesting.py

      - name: Publish package to NPM
        if: startsWith(github.ref, 'refs/tags/')
        run: npm publish --access public

  docker-build:
    name: Build Docker image
    runs-on: ubuntu-latest
    needs:
      - setup

    outputs:
      image_tag: ${{ steps.image_build.outputs.image_tag }}

    steps:
      - uses: actions/checkout@v4

      - name: Build the production Docker image
        id: image_build
        run: |
          image_tag="$IMAGE_NAME:$RELEASE_VERSION"
          echo "image_tag=${image_tag}" >> $GITHUB_OUTPUT
          docker build . \
            --tag $image_tag \
            --build-arg COMMIT_HASH=${{ needs.setup.outputs.git_hash }} \
            --build-arg VERSION=${{ needs.setup.outputs.tag }} \
        env:
          RELEASE_VERSION: ${{ needs.setup.outputs.tag }}

      - run: docker image save -o image.tar $IMAGE_NAME:${{ needs.setup.outputs.tag }}
      - name: Store image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: image.tar
          retention-days: 1

  docker-push:
    name: Push Docker image
    runs-on: ubuntu-latest

    if: github.event_name == 'push' && github.repository_owner == 'maykinmedia' # Exclude PRs / forks

    needs:
      - setup
      - package-build
      - docker-build

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Download built image
        uses: actions/download-artifact@v4
        with:
          name: docker-image

      - name: Load image
        run: |
          docker image load -i image.tar

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Push the Docker image (production)
        run: docker push ${{ needs.docker-build.outputs.image_tag }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push to ghcr.io
        run: |
          docker tag \
            ${{ needs.docker-build.outputs.image_tag }} \
            ghcr.io/maykinmedia/shertogenbosch-design-tokens:${{ needs.setup.outputs.tag }}
          docker push \
            ghcr.io/maykinmedia/shertogenbosch-design-tokens:${{ needs.setup.outputs.tag }}

